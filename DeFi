// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleDeFi {
    struct Deposit {
        uint256 amount;
        uint256 depositTime;
    }

    mapping(address => Deposit) public deposits;
    address public owner;
    uint256 public interestRate; // Annual interest rate in percentage
    uint256 public constant SECONDS_IN_A_YEAR = 31536000; // 60 * 60 * 24 * 365

    constructor(uint256 _interestRate) {
        owner = msg.sender;
        interestRate = _interestRate;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    function deposit() external payable {
        require(msg.value > 0, "Deposit amount must be greater than 0");

        if (deposits[msg.sender].amount > 0) {
            uint256 interest = calculateInterest(msg.sender);
            deposits[msg.sender].amount += interest;
        }

        deposits[msg.sender].amount += msg.value;
        deposits[msg.sender].depositTime = block.timestamp;
    }

    function withdraw(uint256 _amount) external {
        require(deposits[msg.sender].amount >= _amount, "Insufficient balance");

        uint256 interest = calculateInterest(msg.sender);
        deposits[msg.sender].amount += interest;

        payable(msg.sender).transfer(_amount);
        deposits[msg.sender].amount -= _amount;
        deposits[msg.sender].depositTime = block.timestamp;
    }

    function calculateInterest(address _user) public view returns (uint256) {
        Deposit storage userDeposit = deposits[_user];
        if (userDeposit.amount == 0) return 0;

        uint256 timeElapsed = block.timestamp - userDeposit.depositTime;
        uint256 annualInterest = (userDeposit.amount * interestRate) / 100;
        uint256 interest = (annualInterest * timeElapsed) / SECONDS_IN_A_YEAR;

        return interest;
    }

    function getBalance(address _user) external view returns (uint256) {
        uint256 interest = calculateInterest(_user);
        return deposits[_user].amount + interest;
    }

    function changeInterestRate(uint256 _newRate) external onlyOwner {
        interestRate = _newRate;
    }

    function withdrawContractBalance() external onlyOwner {
        payable(owner).transfer(address(this).balance);
    }
}
